<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * @ORM\Entity(repositoryClass="AppBundle\Entity\StoreRepository")
 * @ORM\Table(name="app_stores")
 */
class Store
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\OneToMany(targetEntity="Product", cascade="ALL", orphanRemoval=true)
     */
    private $id;

    /**
     * @ORM\OneToOne(targetEntity="Member", inversedBy="store", cascade="ALL", orphanRemoval=true)
     */
    private $vendor;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $name;

    /**
    * @ORM\Column(type="string")
    */
    private $description;

    /**
    * @ORM\Column(type="boolean")
    */
    private $isOpen;

    /**
    * @ORM\Column(type="string", length=255)
    */
    private $image;

    /**
    * @ORM\Column(type="decimal", precision=10, scale=2)
    * @Assert\GreaterThanOrEqual(value=0)
    */
    private $minimumPurchasePrice;

    /**
    * @ORM\OneToMany(targetEntity="Product", mappedBy="store", cascade="ALL", orphanRemoval=true)
    */
    private $products;

    /**
    * @ORM\OneToMany(targetEntity="Rating", mappedBy="store", cascade="ALL", orphanRemoval=true)
    */
    private $ratings;

    /**
    * @ORM\OneToMany(targetEntity="Order", mappedBy="store", cascade="ALL", orphanRemoval=true)
    */
    private $orders;

    public function __construct() {
       $this->products = new ArrayCollection();
       $this->ratings = new ArrayCollection();
       $this->orders = new ArrayCollection();
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set vendor
     *
     * @param string $vendor
     *
     * @return Store
     */
    public function setVendor($vendor)
    {
        $this->vendor = $vendor;

        return $this;
    }

    /**
     * Get vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->vendor;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return Store
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set description
     *
     * @param string $description
     *
     * @return Store
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set isOpen
     *
     * @param boolean $isOpen
     *
     * @return Store
     */
    public function setIsOpen($isOpen)
    {
        $this->isOpen = $isOpen;

        return $this;
    }

    /**
     * Get isOpen
     *
     * @return boolean
     */
    public function getIsOpen()
    {
        return $this->isOpen;
    }

    /**
     * Set image
     *
     * @param string $image
     *
     * @return Store
     */
    public function setImage($image)
    {
        $this->image = $image;

        return $this;
    }

    public function overwriteImage($directory, $file) {
        $fileName = md5(uniqid()).'.'.$file->guessExtension(); // we do not want to save the same filenames -_-
        if ($this->getImage() == 'storeDefault.jpeg') {
            // omg do not delete the default image, other new stores need it.
        } else {
            $this->deleteFile($directory.'/'.$this->getImage());
        }
        $store->setImage($fileName);
        $file->move($directory, $fileName);

        return $this;
    }

    protected function deleteFile($filePath) {
        $fs = new Filesystem();
        if ($fs->exists($filePath)) {
            $fs->remove($filePath);
        }
    }

    /**
     * Get image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * Set minimumPurchasePrice
     *
     * @param string $minimumPurchasePrice
     *
     * @return Store
     */
    public function setMinimumPurchasePrice($minimumPurchasePrice)
    {
        $this->minimumPurchasePrice = $minimumPurchasePrice;

        return $this;
    }

    /**
     * Get minimumPurchasePrice
     *
     * @return string
     */
    public function getMinimumPurchasePrice()
    {
        return $this->minimumPurchasePrice;
    }

    /**
     * Add product
     *
     * @param \AppBundle\Entity\Product $product
     *
     * @return Store
     */
    public function addProduct(\AppBundle\Entity\Product $product)
    {
        $this->products[] = $product;

        return $this;
    }

    /**
     * Remove product
     *
     * @param \AppBundle\Entity\Product $product
     */
    public function removeProduct(\AppBundle\Entity\Product $product)
    {
        $this->products->removeElement($product);
    }

    /**
     * Get products
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getProducts()
    {
        return $this->products;
    }

    /**
     * Add rating
     *
     * @param \AppBundle\Entity\Rating $rating
     *
     * @return Store
     */
    public function addRating(\AppBundle\Entity\Rating $rating)
    {
        $this->ratings[] = $rating;

        return $this;
    }

    /**
     * Remove rating
     *
     * @param \AppBundle\Entity\Rating $rating
     */
    public function removeRating(\AppBundle\Entity\Rating $rating)
    {
        $this->ratings->removeElement($rating);
    }

    /**
     * Get ratings
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRatings()
    {
        return $this->ratings;
    }
}
